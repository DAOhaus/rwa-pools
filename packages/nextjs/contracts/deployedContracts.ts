/**
 * This file is autogenerated by Scaffold-ETH.
 * You should not edit it manually or your changes might be overwritten.
 */
import { GenericContractsDeclaration } from "~~/utils/scaffold-eth/contract";

const deployedContracts = {
  31337: {
    MockToken1: {
      address: "0xda0e86999f52f370f6b059e9bd634f6f5a67d9a3",
      abi: [
        {
          type: "constructor",
          inputs: [
            {
              name: "name",
              type: "string",
              internalType: "string",
            },
            {
              name: "symbol",
              type: "string",
              internalType: "string",
            },
            {
              name: "initialSupply",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "allowance",
          inputs: [
            {
              name: "owner",
              type: "address",
              internalType: "address",
            },
            {
              name: "spender",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "approve",
          inputs: [
            {
              name: "spender",
              type: "address",
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "balanceOf",
          inputs: [
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "decimals",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint8",
              internalType: "uint8",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "mint",
          inputs: [
            {
              name: "amount",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "name",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "string",
              internalType: "string",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "symbol",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "string",
              internalType: "string",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "totalSupply",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "transfer",
          inputs: [
            {
              name: "to",
              type: "address",
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "transferFrom",
          inputs: [
            {
              name: "from",
              type: "address",
              internalType: "address",
            },
            {
              name: "to",
              type: "address",
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "event",
          name: "Approval",
          inputs: [
            {
              name: "owner",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "spender",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "Transfer",
          inputs: [
            {
              name: "from",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "to",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "error",
          name: "ERC20InsufficientAllowance",
          inputs: [
            {
              name: "spender",
              type: "address",
              internalType: "address",
            },
            {
              name: "allowance",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "needed",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "ERC20InsufficientBalance",
          inputs: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
            {
              name: "balance",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "needed",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "ERC20InvalidApprover",
          inputs: [
            {
              name: "approver",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ERC20InvalidReceiver",
          inputs: [
            {
              name: "receiver",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ERC20InvalidSender",
          inputs: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ERC20InvalidSpender",
          inputs: [
            {
              name: "spender",
              type: "address",
              internalType: "address",
            },
          ],
        },
      ],
      inheritedFunctions: {
        allowance: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        approve: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        balanceOf: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        decimals: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        name: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        symbol: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        totalSupply: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        transfer: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        transferFrom: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
      },
    },
    MockToken2: {
      address: "0x7adb811f14c71888c545bac3e3af625f4ce614e1",
      abi: [
        {
          type: "constructor",
          inputs: [
            {
              name: "name",
              type: "string",
              internalType: "string",
            },
            {
              name: "symbol",
              type: "string",
              internalType: "string",
            },
            {
              name: "initialSupply",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "allowance",
          inputs: [
            {
              name: "owner",
              type: "address",
              internalType: "address",
            },
            {
              name: "spender",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "approve",
          inputs: [
            {
              name: "spender",
              type: "address",
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "balanceOf",
          inputs: [
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "decimals",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint8",
              internalType: "uint8",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "mint",
          inputs: [
            {
              name: "amount",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "name",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "string",
              internalType: "string",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "symbol",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "string",
              internalType: "string",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "totalSupply",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "transfer",
          inputs: [
            {
              name: "to",
              type: "address",
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "transferFrom",
          inputs: [
            {
              name: "from",
              type: "address",
              internalType: "address",
            },
            {
              name: "to",
              type: "address",
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "event",
          name: "Approval",
          inputs: [
            {
              name: "owner",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "spender",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "Transfer",
          inputs: [
            {
              name: "from",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "to",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "error",
          name: "ERC20InsufficientAllowance",
          inputs: [
            {
              name: "spender",
              type: "address",
              internalType: "address",
            },
            {
              name: "allowance",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "needed",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "ERC20InsufficientBalance",
          inputs: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
            {
              name: "balance",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "needed",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "ERC20InvalidApprover",
          inputs: [
            {
              name: "approver",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ERC20InvalidReceiver",
          inputs: [
            {
              name: "receiver",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ERC20InvalidSender",
          inputs: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ERC20InvalidSpender",
          inputs: [
            {
              name: "spender",
              type: "address",
              internalType: "address",
            },
          ],
        },
      ],
      inheritedFunctions: {
        allowance: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        approve: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        balanceOf: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        decimals: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        name: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        symbol: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        totalSupply: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        transfer: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        transferFrom: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
      },
    },
    MockVeBAL: {
      address: "0xae7b2f5cef4e5dc2e9817ba2d79035f32a41f874",
      abi: [
        {
          type: "constructor",
          inputs: [
            {
              name: "name",
              type: "string",
              internalType: "string",
            },
            {
              name: "symbol",
              type: "string",
              internalType: "string",
            },
            {
              name: "initialSupply",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "allowance",
          inputs: [
            {
              name: "owner",
              type: "address",
              internalType: "address",
            },
            {
              name: "spender",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "approve",
          inputs: [
            {
              name: "spender",
              type: "address",
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "balanceOf",
          inputs: [
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "decimals",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint8",
              internalType: "uint8",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "mint",
          inputs: [
            {
              name: "amount",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "name",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "string",
              internalType: "string",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "symbol",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "string",
              internalType: "string",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "totalSupply",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "transfer",
          inputs: [
            {
              name: "to",
              type: "address",
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "transferFrom",
          inputs: [
            {
              name: "from",
              type: "address",
              internalType: "address",
            },
            {
              name: "to",
              type: "address",
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "event",
          name: "Approval",
          inputs: [
            {
              name: "owner",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "spender",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "Transfer",
          inputs: [
            {
              name: "from",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "to",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "error",
          name: "ERC20InsufficientAllowance",
          inputs: [
            {
              name: "spender",
              type: "address",
              internalType: "address",
            },
            {
              name: "allowance",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "needed",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "ERC20InsufficientBalance",
          inputs: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
            {
              name: "balance",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "needed",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "ERC20InvalidApprover",
          inputs: [
            {
              name: "approver",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ERC20InvalidReceiver",
          inputs: [
            {
              name: "receiver",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ERC20InvalidSender",
          inputs: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ERC20InvalidSpender",
          inputs: [
            {
              name: "spender",
              type: "address",
              internalType: "address",
            },
          ],
        },
      ],
      inheritedFunctions: {
        allowance: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        approve: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        balanceOf: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        decimals: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        name: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        symbol: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        totalSupply: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        transfer: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        transferFrom: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
      },
    },
    ConstantSumFactory: {
      address: "0xa0174c43d8593ed777656d0a31264bf4d52e8579",
      abi: [
        {
          type: "constructor",
          inputs: [
            {
              name: "vault",
              type: "address",
              internalType: "contract IVault",
            },
            {
              name: "pauseWindowDuration",
              type: "uint32",
              internalType: "uint32",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "create",
          inputs: [
            {
              name: "name",
              type: "string",
              internalType: "string",
            },
            {
              name: "symbol",
              type: "string",
              internalType: "string",
            },
            {
              name: "salt",
              type: "bytes32",
              internalType: "bytes32",
            },
            {
              name: "tokens",
              type: "tuple[]",
              internalType: "struct TokenConfig[]",
              components: [
                {
                  name: "token",
                  type: "address",
                  internalType: "contract IERC20",
                },
                {
                  name: "tokenType",
                  type: "uint8",
                  internalType: "enum TokenType",
                },
                {
                  name: "rateProvider",
                  type: "address",
                  internalType: "contract IRateProvider",
                },
                {
                  name: "paysYieldFees",
                  type: "bool",
                  internalType: "bool",
                },
              ],
            },
            {
              name: "swapFeePercentage",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "protocolFeeExempt",
              type: "bool",
              internalType: "bool",
            },
            {
              name: "roleAccounts",
              type: "tuple",
              internalType: "struct PoolRoleAccounts",
              components: [
                {
                  name: "pauseManager",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "swapFeeManager",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "poolCreator",
                  type: "address",
                  internalType: "address",
                },
              ],
            },
            {
              name: "poolHooksContract",
              type: "address",
              internalType: "address",
            },
            {
              name: "liquidityManagement",
              type: "tuple",
              internalType: "struct LiquidityManagement",
              components: [
                {
                  name: "disableUnbalancedLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableAddLiquidityCustom",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableRemoveLiquidityCustom",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableDonation",
                  type: "bool",
                  internalType: "bool",
                },
              ],
            },
          ],
          outputs: [
            {
              name: "pool",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "disable",
          inputs: [],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "getActionId",
          inputs: [
            {
              name: "selector",
              type: "bytes4",
              internalType: "bytes4",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bytes32",
              internalType: "bytes32",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getAuthorizer",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "contract IAuthorizer",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getDefaultLiquidityManagement",
          inputs: [],
          outputs: [
            {
              name: "liquidityManagement",
              type: "tuple",
              internalType: "struct LiquidityManagement",
              components: [
                {
                  name: "disableUnbalancedLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableAddLiquidityCustom",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableRemoveLiquidityCustom",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableDonation",
                  type: "bool",
                  internalType: "bool",
                },
              ],
            },
          ],
          stateMutability: "pure",
        },
        {
          type: "function",
          name: "getDefaultPoolHooksContract",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "pure",
        },
        {
          type: "function",
          name: "getDeploymentAddress",
          inputs: [
            {
              name: "salt",
              type: "bytes32",
              internalType: "bytes32",
            },
          ],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getNewPoolPauseWindowEndTime",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint32",
              internalType: "uint32",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getOriginalPauseWindowEndTime",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint32",
              internalType: "uint32",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getPauseWindowDuration",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint32",
              internalType: "uint32",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getVault",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "contract IVault",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "isDisabled",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "isPoolFromFactory",
          inputs: [
            {
              name: "pool",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "event",
          name: "FactoryDisabled",
          inputs: [],
          anonymous: false,
        },
        {
          type: "event",
          name: "PoolCreated",
          inputs: [
            {
              name: "pool",
              type: "address",
              indexed: true,
              internalType: "address",
            },
          ],
          anonymous: false,
        },
        {
          type: "error",
          name: "Disabled",
          inputs: [],
        },
        {
          type: "error",
          name: "PoolPauseWindowDurationOverflow",
          inputs: [],
        },
        {
          type: "error",
          name: "SenderNotAllowed",
          inputs: [],
        },
        {
          type: "error",
          name: "StandardPoolWithCreator",
          inputs: [],
        },
      ],
      inheritedFunctions: {
        disable: "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getActionId: "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getAuthorizer: "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getDefaultLiquidityManagement: "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getDefaultPoolHooksContract: "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getDeploymentAddress: "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getNewPoolPauseWindowEndTime: "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getOriginalPauseWindowEndTime: "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getPauseWindowDuration: "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getVault: "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        isDisabled: "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        isPoolFromFactory: "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
      },
    },
    VeBALFeeDiscountHookExample: {
      address: "0x4582d516b9c3f3badc54694c2bf66f9c4f03c879",
      abi: [
        {
          type: "constructor",
          inputs: [
            {
              name: "vault",
              type: "address",
              internalType: "contract IVault",
            },
            {
              name: "allowedFactory",
              type: "address",
              internalType: "address",
            },
            {
              name: "veBAL",
              type: "address",
              internalType: "address",
            },
            {
              name: "trustedRouter",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "getHookFlags",
          inputs: [],
          outputs: [
            {
              name: "hookFlags",
              type: "tuple",
              internalType: "struct HookFlags",
              components: [
                {
                  name: "enableHookAdjustedAmounts",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallBeforeInitialize",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallAfterInitialize",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallComputeDynamicSwapFee",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallBeforeSwap",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallAfterSwap",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallBeforeAddLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallAfterAddLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallBeforeRemoveLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallAfterRemoveLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
              ],
            },
          ],
          stateMutability: "pure",
        },
        {
          type: "function",
          name: "onAfterAddLiquidity",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "uint8",
              internalType: "enum AddLiquidityKind",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "amountsInRaw",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onAfterInitialize",
          inputs: [
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onAfterRemoveLiquidity",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "uint8",
              internalType: "enum RemoveLiquidityKind",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "amountsOutRaw",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onAfterSwap",
          inputs: [
            {
              name: "",
              type: "tuple",
              internalType: "struct AfterSwapParams",
              components: [
                {
                  name: "kind",
                  type: "uint8",
                  internalType: "enum SwapKind",
                },
                {
                  name: "tokenIn",
                  type: "address",
                  internalType: "contract IERC20",
                },
                {
                  name: "tokenOut",
                  type: "address",
                  internalType: "contract IERC20",
                },
                {
                  name: "amountInScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "amountOutScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "tokenInBalanceScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "tokenOutBalanceScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "amountCalculatedScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "amountCalculatedRaw",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "router",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "pool",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "userData",
                  type: "bytes",
                  internalType: "bytes",
                },
              ],
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onBeforeAddLiquidity",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "uint8",
              internalType: "enum AddLiquidityKind",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onBeforeInitialize",
          inputs: [
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onBeforeRemoveLiquidity",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "uint8",
              internalType: "enum RemoveLiquidityKind",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onBeforeSwap",
          inputs: [
            {
              name: "",
              type: "tuple",
              internalType: "struct PoolSwapParams",
              components: [
                {
                  name: "kind",
                  type: "uint8",
                  internalType: "enum SwapKind",
                },
                {
                  name: "amountGivenScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "balancesScaled18",
                  type: "uint256[]",
                  internalType: "uint256[]",
                },
                {
                  name: "indexIn",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "indexOut",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "router",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "userData",
                  type: "bytes",
                  internalType: "bytes",
                },
              ],
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onComputeDynamicSwapFeePercentage",
          inputs: [
            {
              name: "params",
              type: "tuple",
              internalType: "struct PoolSwapParams",
              components: [
                {
                  name: "kind",
                  type: "uint8",
                  internalType: "enum SwapKind",
                },
                {
                  name: "amountGivenScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "balancesScaled18",
                  type: "uint256[]",
                  internalType: "uint256[]",
                },
                {
                  name: "indexIn",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "indexOut",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "router",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "userData",
                  type: "bytes",
                  internalType: "bytes",
                },
              ],
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "staticSwapFeePercentage",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "onRegister",
          inputs: [
            {
              name: "factory",
              type: "address",
              internalType: "address",
            },
            {
              name: "pool",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "tuple[]",
              internalType: "struct TokenConfig[]",
              components: [
                {
                  name: "token",
                  type: "address",
                  internalType: "contract IERC20",
                },
                {
                  name: "tokenType",
                  type: "uint8",
                  internalType: "enum TokenType",
                },
                {
                  name: "rateProvider",
                  type: "address",
                  internalType: "contract IRateProvider",
                },
                {
                  name: "paysYieldFees",
                  type: "bool",
                  internalType: "bool",
                },
              ],
            },
            {
              name: "",
              type: "tuple",
              internalType: "struct LiquidityManagement",
              components: [
                {
                  name: "disableUnbalancedLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableAddLiquidityCustom",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableRemoveLiquidityCustom",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableDonation",
                  type: "bool",
                  internalType: "bool",
                },
              ],
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "event",
          name: "VeBALFeeDiscountHookExampleRegistered",
          inputs: [
            {
              name: "hooksContract",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "factory",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "pool",
              type: "address",
              indexed: true,
              internalType: "address",
            },
          ],
          anonymous: false,
        },
        {
          type: "error",
          name: "SenderIsNotVault",
          inputs: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
          ],
        },
      ],
      inheritedFunctions: {
        getHookFlags: "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onAfterAddLiquidity: "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onAfterInitialize: "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onAfterRemoveLiquidity: "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onAfterSwap: "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onBeforeAddLiquidity: "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onBeforeInitialize: "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onBeforeRemoveLiquidity: "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onBeforeSwap: "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onComputeDynamicSwapFeePercentage: "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onRegister: "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
      },
    },
    MockERC20Factory: {
      address: "0xbde364c8a9bae9062927c1ba7a8061c87cf2e520",
      abi: [
        {
          type: "constructor",
          inputs: [
            {
              name: "_name",
              type: "string",
              internalType: "string",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "allTokens",
          inputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "createToken",
          inputs: [
            {
              name: "name_",
              type: "string",
              internalType: "string",
            },
            {
              name: "symbol_",
              type: "string",
              internalType: "string",
            },
            {
              name: "tokenOwner_",
              type: "address",
              internalType: "address",
            },
            {
              name: "associatedNFT_",
              type: "address",
              internalType: "address",
            },
            {
              name: "associatedNFTId_",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "membersToFund",
              type: "address[]",
              internalType: "address[]",
            },
            {
              name: "amountsToFund",
              type: "uint256[]",
              internalType: "uint256[]",
            },
          ],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "getAllTokens",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address[]",
              internalType: "address[]",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getTokensByOwner",
          inputs: [
            {
              name: "owner",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "address[]",
              internalType: "address[]",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "lockToken",
          inputs: [
            {
              name: "token",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "name",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "string",
              internalType: "string",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "notifyOwnershipChange",
          inputs: [
            {
              name: "oldOwner",
              type: "address",
              internalType: "address",
            },
            {
              name: "newOwner",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "owner",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "renounceOwnership",
          inputs: [],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "tokensByOwner",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "transferOwnership",
          inputs: [
            {
              name: "newOwner",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "unlockToken",
          inputs: [
            {
              name: "token",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "updateTokenOwnership",
          inputs: [
            {
              name: "token",
              type: "address",
              internalType: "address",
            },
            {
              name: "newOwner",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "event",
          name: "OwnershipTransferred",
          inputs: [
            {
              name: "previousOwner",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "newOwner",
              type: "address",
              indexed: true,
              internalType: "address",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "TokenCreated",
          inputs: [
            {
              name: "owner",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "token",
              type: "address",
              indexed: false,
              internalType: "address",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "TokenLocked",
          inputs: [
            {
              name: "token",
              type: "address",
              indexed: true,
              internalType: "address",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "TokenOwnershipUpdated",
          inputs: [
            {
              name: "oldOwner",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "newOwner",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "token",
              type: "address",
              indexed: false,
              internalType: "address",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "TokenUnlocked",
          inputs: [
            {
              name: "token",
              type: "address",
              indexed: true,
              internalType: "address",
            },
          ],
          anonymous: false,
        },
      ],
      inheritedFunctions: {
        owner: "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        renounceOwnership: "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        transferOwnership: "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
      },
    },
    StakedGovernanceHook: {
      address: "0x170d0227c1db68b6e831c9640c817a23e3adf6e4",
      abi: [
        {
          type: "constructor",
          inputs: [
            {
              name: "vault",
              type: "address",
              internalType: "contract IVault",
            },
            {
              name: "_governanceToken",
              type: "address",
              internalType: "contract IGovernanceToken",
            },
            {
              name: "_stableToken",
              type: "address",
              internalType: "contract IERC20",
            },
            {
              name: "_initialIncentiveFee",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "VOTING_DURATION",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "executeIncentiveFeeUpdate",
          inputs: [],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "getHookFlags",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "tuple",
              internalType: "struct HookFlags",
              components: [
                {
                  name: "enableHookAdjustedAmounts",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallBeforeInitialize",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallAfterInitialize",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallComputeDynamicSwapFee",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallBeforeSwap",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallAfterSwap",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallBeforeAddLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallAfterAddLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallBeforeRemoveLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallAfterRemoveLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
              ],
            },
          ],
          stateMutability: "pure",
        },
        {
          type: "function",
          name: "governanceToken",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "contract IGovernanceToken",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "incentiveFee",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "newIncentiveFeeProposal",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "onAfterAddLiquidity",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "uint8",
              internalType: "enum AddLiquidityKind",
            },
            {
              name: "amountsIn",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onAfterAddLiquidity",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "uint8",
              internalType: "enum AddLiquidityKind",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "amountsInRaw",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onAfterInitialize",
          inputs: [
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onAfterRemoveLiquidity",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "uint8",
              internalType: "enum RemoveLiquidityKind",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "amountsOutRaw",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onAfterSwap",
          inputs: [
            {
              name: "",
              type: "tuple",
              internalType: "struct AfterSwapParams",
              components: [
                {
                  name: "kind",
                  type: "uint8",
                  internalType: "enum SwapKind",
                },
                {
                  name: "tokenIn",
                  type: "address",
                  internalType: "contract IERC20",
                },
                {
                  name: "tokenOut",
                  type: "address",
                  internalType: "contract IERC20",
                },
                {
                  name: "amountInScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "amountOutScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "tokenInBalanceScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "tokenOutBalanceScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "amountCalculatedScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "amountCalculatedRaw",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "router",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "pool",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "userData",
                  type: "bytes",
                  internalType: "bytes",
                },
              ],
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onBeforeAddLiquidity",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "uint8",
              internalType: "enum AddLiquidityKind",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onBeforeInitialize",
          inputs: [
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onBeforeRemoveLiquidity",
          inputs: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "uint8",
              internalType: "enum RemoveLiquidityKind",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "amountsOut",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
            {
              name: "hookAdjustedAmountsOutRaw",
              type: "uint256[]",
              internalType: "uint256[]",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onBeforeRemoveLiquidity",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "uint8",
              internalType: "enum RemoveLiquidityKind",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onBeforeSwap",
          inputs: [
            {
              name: "",
              type: "tuple",
              internalType: "struct PoolSwapParams",
              components: [
                {
                  name: "kind",
                  type: "uint8",
                  internalType: "enum SwapKind",
                },
                {
                  name: "amountGivenScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "balancesScaled18",
                  type: "uint256[]",
                  internalType: "uint256[]",
                },
                {
                  name: "indexIn",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "indexOut",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "router",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "userData",
                  type: "bytes",
                  internalType: "bytes",
                },
              ],
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onComputeDynamicSwapFeePercentage",
          inputs: [
            {
              name: "",
              type: "tuple",
              internalType: "struct PoolSwapParams",
              components: [
                {
                  name: "kind",
                  type: "uint8",
                  internalType: "enum SwapKind",
                },
                {
                  name: "amountGivenScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "balancesScaled18",
                  type: "uint256[]",
                  internalType: "uint256[]",
                },
                {
                  name: "indexIn",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "indexOut",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "router",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "userData",
                  type: "bytes",
                  internalType: "bytes",
                },
              ],
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "onRegister",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "pool",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "tuple[]",
              internalType: "struct TokenConfig[]",
              components: [
                {
                  name: "token",
                  type: "address",
                  internalType: "contract IERC20",
                },
                {
                  name: "tokenType",
                  type: "uint8",
                  internalType: "enum TokenType",
                },
                {
                  name: "rateProvider",
                  type: "address",
                  internalType: "contract IRateProvider",
                },
                {
                  name: "paysYieldFees",
                  type: "bool",
                  internalType: "bool",
                },
              ],
            },
            {
              name: "",
              type: "tuple",
              internalType: "struct LiquidityManagement",
              components: [
                {
                  name: "disableUnbalancedLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableAddLiquidityCustom",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableRemoveLiquidityCustom",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableDonation",
                  type: "bool",
                  internalType: "bool",
                },
              ],
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "owner",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "proposeNewIncentiveFee",
          inputs: [
            {
              name: "newFee",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "renounceOwnership",
          inputs: [],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "stableToken",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "contract IERC20",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "stake",
          inputs: [
            {
              name: "amount",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "votedIncentiveFee",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "stakes",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "amount",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "votedIncentiveFee",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "totalStaked",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "transferOwnership",
          inputs: [
            {
              name: "newOwner",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "unstake",
          inputs: [],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "votesForNewFee",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "votingEndTime",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "event",
          name: "GovernanceHookRegistered",
          inputs: [
            {
              name: "hooksContract",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "pool",
              type: "address",
              indexed: true,
              internalType: "address",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "GovernanceTokensBurned",
          inputs: [
            {
              name: "user",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "amount",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "GovernanceTokensMinted",
          inputs: [
            {
              name: "user",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "amount",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "IncentiveFeeUpdated",
          inputs: [
            {
              name: "newFee",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "NewIncentiveFeeProposed",
          inputs: [
            {
              name: "proposedFee",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "OwnershipTransferred",
          inputs: [
            {
              name: "previousOwner",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "newOwner",
              type: "address",
              indexed: true,
              internalType: "address",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "Staked",
          inputs: [
            {
              name: "user",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "amount",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
            {
              name: "votedIncentiveFee",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "Unstaked",
          inputs: [
            {
              name: "user",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "amount",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "VoteCast",
          inputs: [
            {
              name: "user",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "amount",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
            {
              name: "votedIncentiveFee",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "error",
          name: "OwnableInvalidOwner",
          inputs: [
            {
              name: "owner",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "OwnableUnauthorizedAccount",
          inputs: [
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "SenderIsNotVault",
          inputs: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
          ],
        },
      ],
      inheritedFunctions: {
        getHookFlags: "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onAfterAddLiquidity: "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onAfterInitialize: "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onAfterRemoveLiquidity: "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onAfterSwap: "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onBeforeAddLiquidity: "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onBeforeInitialize: "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onBeforeRemoveLiquidity: "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onBeforeSwap: "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onComputeDynamicSwapFeePercentage: "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onRegister: "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        owner: "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        renounceOwnership: "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        transferOwnership: "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
      },
    },
    ConstantProductFactory: {
      address: "0xb125b237eeefe99e4683040360ba5783f1a7d2ca",
      abi: [
        {
          type: "constructor",
          inputs: [
            {
              name: "vault",
              type: "address",
              internalType: "contract IVault",
            },
            {
              name: "pauseWindowDuration",
              type: "uint32",
              internalType: "uint32",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "create",
          inputs: [
            {
              name: "name",
              type: "string",
              internalType: "string",
            },
            {
              name: "symbol",
              type: "string",
              internalType: "string",
            },
            {
              name: "salt",
              type: "bytes32",
              internalType: "bytes32",
            },
            {
              name: "tokens",
              type: "tuple[]",
              internalType: "struct TokenConfig[]",
              components: [
                {
                  name: "token",
                  type: "address",
                  internalType: "contract IERC20",
                },
                {
                  name: "tokenType",
                  type: "uint8",
                  internalType: "enum TokenType",
                },
                {
                  name: "rateProvider",
                  type: "address",
                  internalType: "contract IRateProvider",
                },
                {
                  name: "paysYieldFees",
                  type: "bool",
                  internalType: "bool",
                },
              ],
            },
            {
              name: "swapFeePercentage",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "protocolFeeExempt",
              type: "bool",
              internalType: "bool",
            },
            {
              name: "roleAccounts",
              type: "tuple",
              internalType: "struct PoolRoleAccounts",
              components: [
                {
                  name: "pauseManager",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "swapFeeManager",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "poolCreator",
                  type: "address",
                  internalType: "address",
                },
              ],
            },
            {
              name: "poolHooksContract",
              type: "address",
              internalType: "address",
            },
            {
              name: "liquidityManagement",
              type: "tuple",
              internalType: "struct LiquidityManagement",
              components: [
                {
                  name: "disableUnbalancedLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableAddLiquidityCustom",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableRemoveLiquidityCustom",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableDonation",
                  type: "bool",
                  internalType: "bool",
                },
              ],
            },
          ],
          outputs: [
            {
              name: "pool",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "disable",
          inputs: [],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "getActionId",
          inputs: [
            {
              name: "selector",
              type: "bytes4",
              internalType: "bytes4",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bytes32",
              internalType: "bytes32",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getAuthorizer",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "contract IAuthorizer",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getDefaultLiquidityManagement",
          inputs: [],
          outputs: [
            {
              name: "liquidityManagement",
              type: "tuple",
              internalType: "struct LiquidityManagement",
              components: [
                {
                  name: "disableUnbalancedLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableAddLiquidityCustom",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableRemoveLiquidityCustom",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableDonation",
                  type: "bool",
                  internalType: "bool",
                },
              ],
            },
          ],
          stateMutability: "pure",
        },
        {
          type: "function",
          name: "getDefaultPoolHooksContract",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "pure",
        },
        {
          type: "function",
          name: "getDeploymentAddress",
          inputs: [
            {
              name: "salt",
              type: "bytes32",
              internalType: "bytes32",
            },
          ],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getNewPoolPauseWindowEndTime",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint32",
              internalType: "uint32",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getOriginalPauseWindowEndTime",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint32",
              internalType: "uint32",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getPauseWindowDuration",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint32",
              internalType: "uint32",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getVault",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "contract IVault",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "isDisabled",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "isPoolFromFactory",
          inputs: [
            {
              name: "pool",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "event",
          name: "FactoryDisabled",
          inputs: [],
          anonymous: false,
        },
        {
          type: "event",
          name: "PoolCreated",
          inputs: [
            {
              name: "pool",
              type: "address",
              indexed: true,
              internalType: "address",
            },
          ],
          anonymous: false,
        },
        {
          type: "error",
          name: "Disabled",
          inputs: [],
        },
        {
          type: "error",
          name: "PoolPauseWindowDurationOverflow",
          inputs: [],
        },
        {
          type: "error",
          name: "SenderNotAllowed",
          inputs: [],
        },
        {
          type: "error",
          name: "StandardPoolWithCreator",
          inputs: [],
        },
      ],
      inheritedFunctions: {
        disable: "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getActionId: "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getAuthorizer: "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getDefaultLiquidityManagement: "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getDefaultPoolHooksContract: "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getDeploymentAddress: "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getNewPoolPauseWindowEndTime: "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getOriginalPauseWindowEndTime: "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getPauseWindowDuration: "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getVault: "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        isDisabled: "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        isPoolFromFactory: "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
      },
    },
    LotteryHookExample: {
      address: "0x2339fc3958b21a8a5be5154b309b144d2335e6a2",
      abi: [
        {
          type: "constructor",
          inputs: [
            {
              name: "vault",
              type: "address",
              internalType: "contract IVault",
            },
            {
              name: "router",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "LUCKY_NUMBER",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint8",
              internalType: "uint8",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "MAX_NUMBER",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint8",
              internalType: "uint8",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getHookFlags",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "tuple",
              internalType: "struct HookFlags",
              components: [
                {
                  name: "enableHookAdjustedAmounts",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallBeforeInitialize",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallAfterInitialize",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallComputeDynamicSwapFee",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallBeforeSwap",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallAfterSwap",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallBeforeAddLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallAfterAddLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallBeforeRemoveLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallAfterRemoveLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
              ],
            },
          ],
          stateMutability: "pure",
        },
        {
          type: "function",
          name: "getRandomNumber",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint8",
              internalType: "uint8",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "hookSwapFeePercentage",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint64",
              internalType: "uint64",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "onAfterAddLiquidity",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "uint8",
              internalType: "enum AddLiquidityKind",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "amountsInRaw",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onAfterInitialize",
          inputs: [
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onAfterRemoveLiquidity",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "uint8",
              internalType: "enum RemoveLiquidityKind",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "amountsOutRaw",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onAfterSwap",
          inputs: [
            {
              name: "params",
              type: "tuple",
              internalType: "struct AfterSwapParams",
              components: [
                {
                  name: "kind",
                  type: "uint8",
                  internalType: "enum SwapKind",
                },
                {
                  name: "tokenIn",
                  type: "address",
                  internalType: "contract IERC20",
                },
                {
                  name: "tokenOut",
                  type: "address",
                  internalType: "contract IERC20",
                },
                {
                  name: "amountInScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "amountOutScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "tokenInBalanceScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "tokenOutBalanceScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "amountCalculatedScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "amountCalculatedRaw",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "router",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "pool",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "userData",
                  type: "bytes",
                  internalType: "bytes",
                },
              ],
            },
          ],
          outputs: [
            {
              name: "success",
              type: "bool",
              internalType: "bool",
            },
            {
              name: "hookAdjustedAmountCalculatedRaw",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onBeforeAddLiquidity",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "uint8",
              internalType: "enum AddLiquidityKind",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onBeforeInitialize",
          inputs: [
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onBeforeRemoveLiquidity",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "uint8",
              internalType: "enum RemoveLiquidityKind",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onBeforeSwap",
          inputs: [
            {
              name: "",
              type: "tuple",
              internalType: "struct PoolSwapParams",
              components: [
                {
                  name: "kind",
                  type: "uint8",
                  internalType: "enum SwapKind",
                },
                {
                  name: "amountGivenScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "balancesScaled18",
                  type: "uint256[]",
                  internalType: "uint256[]",
                },
                {
                  name: "indexIn",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "indexOut",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "router",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "userData",
                  type: "bytes",
                  internalType: "bytes",
                },
              ],
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onComputeDynamicSwapFeePercentage",
          inputs: [
            {
              name: "",
              type: "tuple",
              internalType: "struct PoolSwapParams",
              components: [
                {
                  name: "kind",
                  type: "uint8",
                  internalType: "enum SwapKind",
                },
                {
                  name: "amountGivenScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "balancesScaled18",
                  type: "uint256[]",
                  internalType: "uint256[]",
                },
                {
                  name: "indexIn",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "indexOut",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "router",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "userData",
                  type: "bytes",
                  internalType: "bytes",
                },
              ],
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "onRegister",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "pool",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "tuple[]",
              internalType: "struct TokenConfig[]",
              components: [
                {
                  name: "token",
                  type: "address",
                  internalType: "contract IERC20",
                },
                {
                  name: "tokenType",
                  type: "uint8",
                  internalType: "enum TokenType",
                },
                {
                  name: "rateProvider",
                  type: "address",
                  internalType: "contract IRateProvider",
                },
                {
                  name: "paysYieldFees",
                  type: "bool",
                  internalType: "bool",
                },
              ],
            },
            {
              name: "",
              type: "tuple",
              internalType: "struct LiquidityManagement",
              components: [
                {
                  name: "disableUnbalancedLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableAddLiquidityCustom",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableRemoveLiquidityCustom",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableDonation",
                  type: "bool",
                  internalType: "bool",
                },
              ],
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "owner",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "renounceOwnership",
          inputs: [],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "setHookSwapFeePercentage",
          inputs: [
            {
              name: "swapFeePercentage",
              type: "uint64",
              internalType: "uint64",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "transferOwnership",
          inputs: [
            {
              name: "newOwner",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "event",
          name: "HookSwapFeePercentageChanged",
          inputs: [
            {
              name: "hooksContract",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "hookFeePercentage",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "LotteryFeeCollected",
          inputs: [
            {
              name: "hooksContract",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "token",
              type: "address",
              indexed: true,
              internalType: "contract IERC20",
            },
            {
              name: "feeAmount",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "LotteryHookExampleRegistered",
          inputs: [
            {
              name: "hooksContract",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "pool",
              type: "address",
              indexed: true,
              internalType: "address",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "LotteryWinningsPaid",
          inputs: [
            {
              name: "hooksContract",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "winner",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "token",
              type: "address",
              indexed: true,
              internalType: "contract IERC20",
            },
            {
              name: "amountWon",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "OwnershipTransferred",
          inputs: [
            {
              name: "previousOwner",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "newOwner",
              type: "address",
              indexed: true,
              internalType: "address",
            },
          ],
          anonymous: false,
        },
        {
          type: "error",
          name: "AddressEmptyCode",
          inputs: [
            {
              name: "target",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "AddressInsufficientBalance",
          inputs: [
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "FailedInnerCall",
          inputs: [],
        },
        {
          type: "error",
          name: "IndexOutOfBounds",
          inputs: [],
        },
        {
          type: "error",
          name: "OwnableInvalidOwner",
          inputs: [
            {
              name: "owner",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "OwnableUnauthorizedAccount",
          inputs: [
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "SafeERC20FailedOperation",
          inputs: [
            {
              name: "token",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "SenderIsNotVault",
          inputs: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
          ],
        },
      ],
      inheritedFunctions: {
        getHookFlags: "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onAfterAddLiquidity: "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onAfterInitialize: "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onAfterRemoveLiquidity: "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onAfterSwap: "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onBeforeAddLiquidity: "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onBeforeInitialize: "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onBeforeRemoveLiquidity: "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onBeforeSwap: "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onComputeDynamicSwapFeePercentage: "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onRegister: "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        owner: "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        renounceOwnership: "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        transferOwnership: "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
      },
    },
    WeightedPoolFactory: {
      address: "0x52a7cbe8c3b3c0a53d0d3c1a4de7478c78a313d8",
      abi: [
        {
          type: "constructor",
          inputs: [
            {
              name: "vault",
              type: "address",
              internalType: "contract IVault",
            },
            {
              name: "pauseWindowDuration",
              type: "uint32",
              internalType: "uint32",
            },
            {
              name: "factoryVersion",
              type: "string",
              internalType: "string",
            },
            {
              name: "poolVersion",
              type: "string",
              internalType: "string",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "create",
          inputs: [
            {
              name: "name",
              type: "string",
              internalType: "string",
            },
            {
              name: "symbol",
              type: "string",
              internalType: "string",
            },
            {
              name: "tokens",
              type: "tuple[]",
              internalType: "struct TokenConfig[]",
              components: [
                {
                  name: "token",
                  type: "address",
                  internalType: "contract IERC20",
                },
                {
                  name: "tokenType",
                  type: "uint8",
                  internalType: "enum TokenType",
                },
                {
                  name: "rateProvider",
                  type: "address",
                  internalType: "contract IRateProvider",
                },
                {
                  name: "paysYieldFees",
                  type: "bool",
                  internalType: "bool",
                },
              ],
            },
            {
              name: "normalizedWeights",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "roleAccounts",
              type: "tuple",
              internalType: "struct PoolRoleAccounts",
              components: [
                {
                  name: "pauseManager",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "swapFeeManager",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "poolCreator",
                  type: "address",
                  internalType: "address",
                },
              ],
            },
            {
              name: "swapFeePercentage",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "poolHooksContract",
              type: "address",
              internalType: "address",
            },
            {
              name: "enableDonation",
              type: "bool",
              internalType: "bool",
            },
            {
              name: "disableUnbalancedLiquidity",
              type: "bool",
              internalType: "bool",
            },
            {
              name: "salt",
              type: "bytes32",
              internalType: "bytes32",
            },
          ],
          outputs: [
            {
              name: "pool",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "disable",
          inputs: [],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "getActionId",
          inputs: [
            {
              name: "selector",
              type: "bytes4",
              internalType: "bytes4",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bytes32",
              internalType: "bytes32",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getAuthorizer",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "contract IAuthorizer",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getDefaultLiquidityManagement",
          inputs: [],
          outputs: [
            {
              name: "liquidityManagement",
              type: "tuple",
              internalType: "struct LiquidityManagement",
              components: [
                {
                  name: "disableUnbalancedLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableAddLiquidityCustom",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableRemoveLiquidityCustom",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableDonation",
                  type: "bool",
                  internalType: "bool",
                },
              ],
            },
          ],
          stateMutability: "pure",
        },
        {
          type: "function",
          name: "getDefaultPoolHooksContract",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "pure",
        },
        {
          type: "function",
          name: "getDeploymentAddress",
          inputs: [
            {
              name: "salt",
              type: "bytes32",
              internalType: "bytes32",
            },
          ],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getNewPoolPauseWindowEndTime",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint32",
              internalType: "uint32",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getOriginalPauseWindowEndTime",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint32",
              internalType: "uint32",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getPauseWindowDuration",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint32",
              internalType: "uint32",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getPoolVersion",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "string",
              internalType: "string",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getVault",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "contract IVault",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "isDisabled",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "isPoolFromFactory",
          inputs: [
            {
              name: "pool",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "version",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "string",
              internalType: "string",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "event",
          name: "FactoryDisabled",
          inputs: [],
          anonymous: false,
        },
        {
          type: "event",
          name: "PoolCreated",
          inputs: [
            {
              name: "pool",
              type: "address",
              indexed: true,
              internalType: "address",
            },
          ],
          anonymous: false,
        },
        {
          type: "error",
          name: "Disabled",
          inputs: [],
        },
        {
          type: "error",
          name: "PoolPauseWindowDurationOverflow",
          inputs: [],
        },
        {
          type: "error",
          name: "SenderNotAllowed",
          inputs: [],
        },
        {
          type: "error",
          name: "StandardPoolWithCreator",
          inputs: [],
        },
      ],
      inheritedFunctions: {
        getPoolVersion: "lib/balancer-v3-monorepo/pkg/interfaces/contracts/solidity-utils/helpers/IPoolVersion.sol",
        disable: "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getActionId: "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getAuthorizer: "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getDefaultLiquidityManagement: "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getDefaultPoolHooksContract: "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getDeploymentAddress: "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getNewPoolPauseWindowEndTime: "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getOriginalPauseWindowEndTime: "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getPauseWindowDuration: "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getVault: "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        isDisabled: "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        isPoolFromFactory: "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        version: "lib/balancer-v3-monorepo/pkg/solidity-utils/contracts/helpers/Version.sol",
      },
    },
    ExitFeeHookExample: {
      address: "0xf361f43bd0540d3a8cbbc0ab41275017c04d5ef5",
      abi: [
        {
          type: "constructor",
          inputs: [
            {
              name: "vault",
              type: "address",
              internalType: "contract IVault",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "MAX_EXIT_FEE_PERCENTAGE",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint64",
              internalType: "uint64",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "exitFeePercentage",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint64",
              internalType: "uint64",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getHookFlags",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "tuple",
              internalType: "struct HookFlags",
              components: [
                {
                  name: "enableHookAdjustedAmounts",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallBeforeInitialize",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallAfterInitialize",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallComputeDynamicSwapFee",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallBeforeSwap",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallAfterSwap",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallBeforeAddLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallAfterAddLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallBeforeRemoveLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallAfterRemoveLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
              ],
            },
          ],
          stateMutability: "pure",
        },
        {
          type: "function",
          name: "onAfterAddLiquidity",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "uint8",
              internalType: "enum AddLiquidityKind",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "amountsInRaw",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onAfterInitialize",
          inputs: [
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onAfterRemoveLiquidity",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "pool",
              type: "address",
              internalType: "address",
            },
            {
              name: "kind",
              type: "uint8",
              internalType: "enum RemoveLiquidityKind",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "amountsOutRaw",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
            {
              name: "hookAdjustedAmountsOutRaw",
              type: "uint256[]",
              internalType: "uint256[]",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onAfterSwap",
          inputs: [
            {
              name: "",
              type: "tuple",
              internalType: "struct AfterSwapParams",
              components: [
                {
                  name: "kind",
                  type: "uint8",
                  internalType: "enum SwapKind",
                },
                {
                  name: "tokenIn",
                  type: "address",
                  internalType: "contract IERC20",
                },
                {
                  name: "tokenOut",
                  type: "address",
                  internalType: "contract IERC20",
                },
                {
                  name: "amountInScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "amountOutScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "tokenInBalanceScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "tokenOutBalanceScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "amountCalculatedScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "amountCalculatedRaw",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "router",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "pool",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "userData",
                  type: "bytes",
                  internalType: "bytes",
                },
              ],
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onBeforeAddLiquidity",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "uint8",
              internalType: "enum AddLiquidityKind",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onBeforeInitialize",
          inputs: [
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onBeforeRemoveLiquidity",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "uint8",
              internalType: "enum RemoveLiquidityKind",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onBeforeSwap",
          inputs: [
            {
              name: "",
              type: "tuple",
              internalType: "struct PoolSwapParams",
              components: [
                {
                  name: "kind",
                  type: "uint8",
                  internalType: "enum SwapKind",
                },
                {
                  name: "amountGivenScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "balancesScaled18",
                  type: "uint256[]",
                  internalType: "uint256[]",
                },
                {
                  name: "indexIn",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "indexOut",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "router",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "userData",
                  type: "bytes",
                  internalType: "bytes",
                },
              ],
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onComputeDynamicSwapFeePercentage",
          inputs: [
            {
              name: "",
              type: "tuple",
              internalType: "struct PoolSwapParams",
              components: [
                {
                  name: "kind",
                  type: "uint8",
                  internalType: "enum SwapKind",
                },
                {
                  name: "amountGivenScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "balancesScaled18",
                  type: "uint256[]",
                  internalType: "uint256[]",
                },
                {
                  name: "indexIn",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "indexOut",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "router",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "userData",
                  type: "bytes",
                  internalType: "bytes",
                },
              ],
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "onRegister",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "pool",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "tuple[]",
              internalType: "struct TokenConfig[]",
              components: [
                {
                  name: "token",
                  type: "address",
                  internalType: "contract IERC20",
                },
                {
                  name: "tokenType",
                  type: "uint8",
                  internalType: "enum TokenType",
                },
                {
                  name: "rateProvider",
                  type: "address",
                  internalType: "contract IRateProvider",
                },
                {
                  name: "paysYieldFees",
                  type: "bool",
                  internalType: "bool",
                },
              ],
            },
            {
              name: "liquidityManagement",
              type: "tuple",
              internalType: "struct LiquidityManagement",
              components: [
                {
                  name: "disableUnbalancedLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableAddLiquidityCustom",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableRemoveLiquidityCustom",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableDonation",
                  type: "bool",
                  internalType: "bool",
                },
              ],
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "owner",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "renounceOwnership",
          inputs: [],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "setExitFeePercentage",
          inputs: [
            {
              name: "newExitFeePercentage",
              type: "uint64",
              internalType: "uint64",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "transferOwnership",
          inputs: [
            {
              name: "newOwner",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "event",
          name: "ExitFeeCharged",
          inputs: [
            {
              name: "pool",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "token",
              type: "address",
              indexed: true,
              internalType: "contract IERC20",
            },
            {
              name: "feeAmount",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "ExitFeeHookExampleRegistered",
          inputs: [
            {
              name: "hooksContract",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "pool",
              type: "address",
              indexed: true,
              internalType: "address",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "ExitFeePercentageChanged",
          inputs: [
            {
              name: "hookContract",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "exitFeePercentage",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "OwnershipTransferred",
          inputs: [
            {
              name: "previousOwner",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "newOwner",
              type: "address",
              indexed: true,
              internalType: "address",
            },
          ],
          anonymous: false,
        },
        {
          type: "error",
          name: "ExitFeeAboveLimit",
          inputs: [
            {
              name: "feePercentage",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "limit",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "OwnableInvalidOwner",
          inputs: [
            {
              name: "owner",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "OwnableUnauthorizedAccount",
          inputs: [
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "PoolDoesNotSupportDonation",
          inputs: [],
        },
        {
          type: "error",
          name: "SenderIsNotVault",
          inputs: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
          ],
        },
      ],
      inheritedFunctions: {
        getHookFlags: "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onAfterAddLiquidity: "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onAfterInitialize: "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onAfterRemoveLiquidity: "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onAfterSwap: "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onBeforeAddLiquidity: "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onBeforeInitialize: "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onBeforeRemoveLiquidity: "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onBeforeSwap: "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onComputeDynamicSwapFeePercentage: "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onRegister: "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        owner: "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        renounceOwnership: "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        transferOwnership: "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
      },
    },
  },
} as const;

export default deployedContracts satisfies GenericContractsDeclaration;
